#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'fileutils'
require 'find'

program :name, 'milk'
program :version, '0.0.01'
program :description, 'Build utility for the Milk framework'

# ******************************************************************************

command :join do |c|
  c.syntax = 'milk join PATH [options]'
  c.summary = 'joins modules'
  c.description = "TODO: describe."
  c.example 'Joins the milk framework saving it to milk.coffee file', 'milk join source/milk --output-file milk.coffee'
  c.option '--output-dir PATH', 'output directory, default: build'
  c.option '--print', 'Prints to STDOUT instead of writing to a file'

  c.action do |args, options|
    options.default :output_dir => "build"

    path = File.dirname(args[0])
    name = File.basename(args[0])

    dependency_graph = construct_dependency_graph path, name
    sorted_file_paths = sort dependency_graph
    concatenated = concatenate path, sorted_file_paths

    if options.print
      puts concatenated
    else
      output_file_path = File.join options.output_dir, name + ".coffee"
      File.open(output_file_path, "w") { |file| file.write concatenated }
    end
  end
end

command :init do |c|
  c.syntax = 'milk init [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'

  c.action do |args, options|
    # TODO: implement.
  end
end

# ******************************************************************************

def construct_dependency_graph(path, name)
  pwd = Dir.pwd
  Dir.chdir path
  dependency_graph = {}
  Find.find(name) do |file_path|
    if File.extname(file_path) == ".coffee"
      required_paths = required_paths_for file_path
      dependency_graph[file_path] = required_paths
    end
  end
  Dir.chdir pwd
  dependency_graph
end

def required_paths_for(path)
  source = File.open(path, "r") { |file| file.read }
  source.scan(REQUIRE_REGEXP).collect do |dependency|
    file_path_from dependency.first.to_s
  end
end

def concatenate(path, file_paths)
  pwd = Dir.pwd
  Dir.chdir path
  concatenated = ""
  file_paths.collect do |file_path|
    source = File.open(file_path, "r") { |file| file.read }
    result = source.scan(/\A((?:#.*\n)*)((?:.|\n)*)/)
    head = result.first[0]
    tail = result.first[1]
    tail.gsub! /^/, "  "
    concatenated << "# #{'-' * (63 - file_path.length)} file: #{file_path} -------\n"
    concatenated << head + "\nnamespace '#{namespace_path_from file_path}', ->" + tail
    concatenated << "\n"
  end
  Dir.chdir pwd
  concatenated
end

def ensure_path_exists(path)
  error "No source directory found at path: " + path unless File.directory? path
end

def change_working_directory_to(path)
  Dir.chdir path
end

def sort(dependency_graph)
  begin
    dependency_graph.tsort
  rescue TSort::Cyclic => cyclic
    error "Cycle detected: " + cyclic.message.gsub("topological sort failed: ", "")
  end
end

def file_path_from(namespace_path)
  namespace_path.to_s.gsub(/::/, '/').
    gsub('.', '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("_", "-").
    downcase + '.coffee'
end

def namespace_path_from(file_path)
  file_path.gsub(".coffee", "").gsub("/", ".-").gsub(/(^|-)(.)/) { $2.upcase }
end

def put(string)
  print string
  STDOUT.flush
end

def error(message)
  puts "[ERROR] " + message
  exit 1
end

# ******************************************************************************

REQUIRE_REGEXP = /^\s*(?:\w+\s*=\s*)?\s*require\s*\(?[\"|\'](.*)[\"|\']/

PREFIX = """
GLOBAL = this
"""

# ******************************************************************************

class Hash
  include TSort
  alias tsort_each_node each_key
  def tsort_each_child(node, &block)
    fetch(node).each(&block)
  end
end
