#!/usr/bin/env ruby
#
# Copyright (c) 2011 Konstantin Bender.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'fileutils'
require 'find'
require 'tsort'

# ******************************************************************************

REQUIRE_REGEXP = /^\s*(?:\w+\s*=\s*)?\s*require\s*\(?[\"|\'](.*)[\"|\']/

# ******************************************************************************

class Hash
  include TSort
  alias tsort_each_node each_key
  def tsort_each_child(node, &block)
    fetch(node).each(&block)
  end
end

# ******************************************************************************

def grind(args, options = {})
  check args

  file_paths = find_file_paths args
  sources_by_file_path = load_sources_for file_paths

  required_namespace_paths_by_file_path = extract_required_namespace_paths_from sources_by_file_path
  required_file_paths_by_file_path = find_required_file_paths_for required_namespace_paths_by_file_path, file_paths

  remove_unused_file_paths_from required_file_paths_by_file_path
  sorted_file_paths = sort required_file_paths_by_file_path

  wrap_sources_by_closure sources_by_file_path
  puts sources_by_file_path
end

def check(args)
  error "Usage: grind path [path ...]" if args.size == 0
  args.each { |path| error "Directory not found: " + path unless File.directory? path }
end

def find_file_paths(directories)
  file_paths = []
  directories.each do |dir|
    Find.find(dir) do |path|
      file_paths << path if File.extname(path) == '.coffee'
    end
  end
  file_paths
end

def load_sources_for(file_paths)
  file_paths.reduce({}) do |sources_by_file_path, file_path|
    source = File.open(file_path, "r") {|file| file.read }
    sources_by_file_path[file_path] = source
    sources_by_file_path
  end
end

def extract_required_namespace_paths_from(sources)
  namespace_paths = {}
  sources.each_pair do |file_path, source|
    namespace_paths[file_path] = source.scan(REQUIRE_REGEXP).collect do |dependency|
      dependency.first.to_s
    end
  end
  namespace_paths
end

def find_required_file_paths_for(required_namespace_paths_by_file_path, all_file_paths)
  required_file_paths_by_file_path = {}
  required_namespace_paths_by_file_path.each_pair do |file_path, required_namespace_paths|
    required_file_paths_by_file_path[file_path] = required_namespace_paths.map do |required_namespace_path|
      file_path_for_required_namespace_path = file_path_from required_namespace_path
      error "Could not find file for module '#{required_namespace_path}' at path '#{file_path_for_required_namespace_path}' required in '#{file_path}'." unless File.exists? file_path_for_required_namespace_path
      file_path_for_required_namespace_path
    end
  end
  required_file_paths_by_file_path
end

def remove_unused_file_paths_from(required_file_paths_by_file_path)
  used_file_paths = []
  required_file_paths_by_file_path.each_value { |required_file_paths| used_file_paths.concat required_file_paths }
  required_file_paths_by_file_path.delete_if { |file_path| not file_path.end_with?("core.coffee") and not used_file_paths.include?(file_path) }
end

def sort(required_file_paths_by_file_path)
  begin
    required_file_paths_by_file_path.tsort
  rescue TSort::Cyclic => cyclic
    error "Cycle detected: " + cyclic.message.gsub("topological sort failed: ", "")
  end
end

def wrap_sources_by_closure(sources_by_file_path)
  sources_by_file_path.each_value do |source|
    source.gsub! /^/, "  "
    source.insert 0, "namespace 'Milk.Controllers.ArrayController', do ->\n"
  end
end

def file_path_from(namespace_path)
  namespace_path.to_s.gsub(/::/, '/').
    gsub('.', '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("_", "-").
    downcase + '.coffee'
end

def put(string)
  print string
  STDOUT.flush
end

def error(message)
  puts "[ERROR] " + message
  exit 1
end

# ******************************************************************************

grind ARGV
