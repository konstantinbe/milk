#!/usr/bin/env ruby
#
# Copyright (c) 2011 Konstantin Bender.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'fileutils'
require 'find'
require 'tsort'

# ******************************************************************************

class String
  def underscorize
    self.to_s.gsub(/::/, '/').
      gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
      gsub(/([a-z\d])([A-Z])/,'\1_\2').
      tr("-", "_").
      downcase
  end

  def dasherize
    gsub "_", "-"
  end
end

class Hash
  include TSort
  alias tsort_each_node each_key
  def tsort_each_child(node, &block)
    fetch(node).each(&block)
  end
end

# ******************************************************************************

def grind(frameworks, options = {})
  check frameworks
  source_paths = find_paths_for_source_files_in frameworks
  dependencies = extract_dependencies_for source_paths
  sorted_source_paths = sort dependencies
  puts sorted_paths
end

def check(args)
  error "Usage: grind path [path ...]" if args.size == 0
  args.each { |path| error "[ERROR] Directory not found: " + path unless File.directory? path }
end

def find_paths_for_source_files_in(directories)
  file_paths = []
  directories.each do |dir|
    Find.find(dir) do |path|
      file_paths << path if File.extname(path) == '.coffee'
    end
  end
  file_paths
end

def extract_dependencies_for(source_file_paths)
  dependencies = {}
  source_file_paths.each do |source_file_path|
    source = File.open(source_file_path, "r") { |file| file.read }
    dependencies[source_file_path] = source.scan(/\s*require\s*\(?[\"|\'](.*)[\"|\']/).collect do |dependency|
      file_path_from dependency.first.to_s
    end
  end
  dependencies
end

def sort(dependencies)
  begin
    dependencies.tsort
  rescue TSort::Cyclic => cyclic
    error "[ERROR] Cycle detected: " + cyclic.message.gsub("topological sort failed: ", "")
  end
end

def file_path_from(namespace_path)
  namespace_path.to_s.gsub(/::/, '/').
    gsub('.', '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    tr("_", "-").
    downcase + '.coffee'
end

def put(string)
  print string
  STDOUT.flush
end

def error(message)
  puts message
  exit 1
end

# ******************************************************************************

grind ARGV
