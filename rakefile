#!/usr/bin/env ruby

require 'fileutils'
require 'rubygems'
require 'net/github-upload'

# ------------------------------------------------------------- custom tasks ---

task :build => [:prepare] do
  put "Concatenating source files ... "
  file_names = [NAME] + File.open("source/#{NAME}.coffee", "r") { |file| file.read }.scan(/^\s*require\s*\(?[\"|\'](.*)[\"|\']/)
  file_paths = file_names.map do |file_name|
    "source/" + file_name.to_s + ".coffee"
  end
  run "cat #{file_paths.join(" ")} > build/#{NAME}.coffee"
  puts OK

  put "Compiling #{NAME}.coffee ... "
  run "coffee --compile --output build/ build/#{NAME}.coffee"
  puts OK

  put "Preparing release package ... "
  delete_file_if_exists "build/#{NAME}-#{RELEASE}"
  run "mkdir build/#{NAME}-#{RELEASE}"
  run "cp build/#{NAME}.coffee build/#{NAME}-#{RELEASE}/"
  puts OK
end

task :specs => [:prepare, :build] do
  put "Concatenating specs ... "
  run "cat specs/*.coffee > build/specs.coffee"
  puts OK

  put "Compiling specs.coffee ... "
  run "coffee --compile --output build/ build/specs.coffee"
  puts OK

  put "Opening specs in browser ... "
  run "open resources/specs.html"
  puts OK
end

# ------------------------------------------------------------ default tasks ---

task :release => [:check, :clean, :prepare, :build, :pack, :upload, :update, :tag, :push] do
  puts "Released version #{RELEASE}."
end

task :check do
  put "Checking whether the Changelog has an entry marked with 'Underway' ... "
  readme = File.open("README.md", "r") { |file| file.read }
  check readme.match /^### (\d\.\d.+) - Underway/
  puts OK

  put "Checking whether version #{RELEASE} isn't already released ... "
  output = `git tag`
  check (not (output.match RELEASE))
  puts OK

  put "Checking whether repo is clean ... "
  output = `git status`
  check output.match "working directory clean"
  puts OK

  put "Checking whether on branch master ... "
  output = `git status`
  check output.match "On branch master"
  puts OK

  put "Checking whether master in sync with origin/master ... "
  output = `git diff master origin/master`
  check output.length == 0
  puts OK
end

task :clean do
  put "Cleaning ... "
  delete_file_if_exists "build"
  puts OK
end

task :prepare do
  run "mkdir build" unless File.exists? "build"
end

task :pack do
  put "Packing release package ... "
  run "cd build; zip -rq #{NAME}-#{RELEASE}.zip #{NAME}-#{RELEASE}; cd .."
  puts OK
end

task :upload do
  put "Uploading release package to GitHub ... "
  repos = "#{LOGIN}/#{NAME}"

  github = Net::GitHub::Upload.new :login => LOGIN, :token => TOKEN
  direct_link = github.upload :repos => repos, :file  => "build/#{NAME}-#{RELEASE}.zip", :description => ""
  puts OK
end

task :update do
  put "Updating Changelog in README ... "
  readme = File.open("README.md", "r") { |file| file.read }
  readme.gsub! /^### (\d\.\d.+) - Underway/, '### \1'
  File.open("README.md", "w") { |file| file.write readme }
  output = `git add README.md`
  output = `git commit -m 'Released #{RELEASE}.'`
  puts OK
end

task :tag do
  put "Tagging ... "
  output = `git tag #{RELEASE}`
  puts OK
end

task :push do
  put "Pushing changes ... "
  output = `git push`
  puts OK

  put "Pushing tags ... "
  output = `git push --tags`
  puts OK
end

task :init do
  put "Setting up repo ... "
  run "mv .git/hooks/pre-commit.sample .git/hooks/pre-commit" unless File.exists? ".git/hooks/pre-commit"
  run "git config --unset core.ignorecase" if `git config core.ignorecase`.length > 0
  puts OK

  put "Setting up wiki ... "
  run "git clone #{WIKI} wiki" unless File.exists? "wiki"
  run "mv wiki/.git/hooks/pre-commit.sample wiki/.git/hooks/pre-commit" unless File.exists? "wiki/.git/hooks/pre-commit"
  run "cd wiki; git config --unset core.ignorecase" if `git config core.ignorecase`.length > 0
  puts OK
end

# ---------------------------------------------------------------- functions ---

def assert(condition, message = "")
  unless condition
    puts message + "\n\n"
    exit 1
  end
end

def check(condition)
  unless condition
    puts FAILED
    exit 1
  end
end

def run(command)
  success = system command
  check success
end

def delete_file_if_exists(path)
  run "rm -rf #{path}" if File.exists? path
end

def put(string)
  print string
  STDOUT.flush
end

# ---------------------------------------------------------------- constants ---

REPO = `git config remote.origin.url`.chomp
NAME = REPO.scan(/\/(.*)\.git/).first.to_s
WIKI = REPO.gsub ".git", ".wiki.git"
LOGIN = `git config github.user`.chomp
TOKEN = `git config github.token`.chomp
OK = "\33[0m\33[32mOK\33[0m"
FAILED = "\33[0m\33[31mFAILED\33[0m"
RELEASE = File.open("README.md", "r") { |file| file.read }.scan(/^### (\d(?:\.\d+)+)\s/).first.to_s
