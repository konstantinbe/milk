#!/usr/bin/env ruby
#
# Copyright (c) 2010 Konstantin Bender.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'find'
require 'FileUtils'

# ---------------------------------------------------------------- constants ---

LANGUAGES = []

LANGUAGES << {
  :name => "JavaScript",
  :extension => '.js',
  :comment => '//',
  :regexp => '/\A((?:.|\n)*?)^\s*require\s*\(\s*[\"|\'](.*)[\"|\']((?:.|\n)*)\Z/'
}

LANGUAGES << {
  :name => "CoffeeScript",
  :extension => '.coffee',
  :comment => '#',
  :regexp => '/\A((?:.|\n)*?)^\s*requi/re\s*\(?[\"|\'](.*)[\"|\']((?:.|\n)*)\Z/'
}

# ---------------------------------------------------------------- functions ---

def concatenate(source, regexp, extension, concatenated = "")
  return concatenated + source unless source.match regexp
  result = source.scan regexp

  path = result[0][1].to_s + extension

  assert File.exists? path, "File not found: #{path}"
  assert File.file? path, "Not a file at path: #{path}"

  source = "\n" + File.open(path, "r") { |file| file.read } + result[0][2].to_s
  concatenated = concatenated + result[0][0].to_s

  concatenate source, regexp, extension, concatenated
end

def assert(condition, message = "", error = 1)
  unless condition
    puts "[ERROR] " + message
    exit error
  end
end

# --------------------------------------------------------------------- main ---

# make sure arguments are given, otherwise print usage
assert ARGV.length > 0, "No files to concatenate.\n\nUsage:\n    concatenate file1 [file2 ...]"

# get files from arguments
files = ARGV

# make sure files exist
files.each do |file|
  assert File.exists?(file), "File not found: #{file}"
  assert File.file?(file), "Not a file at: #{file}"
end

# make sure all files have the same type
extensions = files.map { |file| File.extname file }.uniq
assert extensions.length == 1, "All files must have the same type."

# make sure the language is supported
extension = extensions.first
language = LANGUAGES.find { |language| language[:extension] == extension }
assert language, "No language definition found for file type: #{extension}"

# read contents of files
contents = files.map do |path|
  File.open(path, "r") { |file| file.read }
end

# concatenate contents of files
source = contents.join "\n"

# process
puts concatenate(source, language[:regexp], extension)
